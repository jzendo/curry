{"version":3,"sources":["../node_modules/invariant/browser.js","index.js"],"names":["invariant","condition","format","a","b","c","d","e","f","error","undefined","Error","args","argIndex","replace","name","framesToPop","module","exports","curry","ERROR_PARAM_INVALID_FN","continuePassArgsOrFired","fn","maxArgsNum","currentArgsNum","length","apply","slice","arguments","fnLen","curryWrapper","arg0"],"mappings":";AAOA,aAaA,IAAIA,EAAY,SAASC,EAAWC,EAAQC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GAOrD,IAACP,EAAW,CACVQ,IAAAA,EACAP,QAAWQ,IAAXR,EACFO,EAAQ,IAAIE,MACV,qIAGG,CACDC,IAAAA,EAAO,CAACT,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GACvBK,EAAW,GACfJ,EAAQ,IAAIE,MACVT,EAAOY,QAAQ,MAAO,WAAoBF,OAAAA,EAAKC,SAE3CE,KAAO,sBAITN,MADNA,EAAMO,YAAc,EACdP,IAIVQ,OAAOC,QAAUlB;;ACbFmB,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAnCf,IAAA,EAAA,EAAA,QAAA,cAmCeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,IAAAA,EAAAA,IAAAA,IAAAA,SAAAA,IAAAA,MAAAA,IAAAA,UAAAA,mDAAAA,SAAAA,EAAAA,GAAAA,GAAAA,OAAAA,YAAAA,OAAAA,IAAAA,uBAAAA,OAAAA,UAAAA,SAAAA,KAAAA,GAAAA,OAAAA,MAAAA,KAAAA,GAAAA,SAAAA,EAAAA,GAAAA,GAAAA,MAAAA,QAAAA,GAAAA,CAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,MAAAA,EAAAA,QAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAAAA,OAAAA,GAjCf,IAAMC,EAAyB,sCAEzBC,EAA0B,SAASA,EACvCC,EACAV,EACAW,GAIIC,OAFmBZ,EAAKa,QAENF,EACbD,EAAGI,MAAM,KAAMd,EAAKe,MAAM,EAAGJ,IAE7B,WACEF,OAAAA,EAAwBC,EAAQV,GAAAA,OAAAA,EAAAA,GAASgB,MAAAA,UAAAA,MAAAA,KAAAA,YAAYL,KAK5DJ,EAAQ,SAAAG,IACF,EAAA,EAAA,SAAc,mBAAPA,EAAmBF,GAE9BS,IAAAA,EAAQP,EAAGG,OAEXK,EAAe,SAAsBC,GAClCV,OAAAA,EAAwBC,EAAQM,MAAAA,UAAAA,MAAAA,KAAAA,WAAYC,IAM9CC,OAFPA,EAAaR,GAAKA,EAEXQ,GAGMX,EAAAA,EAAAA,QAAAA,QAAAA","file":"index.js","sourceRoot":"../src","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","import invariant from 'invariant'\n\nconst ERROR_PARAM_INVALID_FN = 'should use a function as parameter.'\n\nconst continuePassArgsOrFired = function continuePassArgsOrFired(\n  fn,\n  args,\n  maxArgsNum\n) {\n  const currentArgsNum = args.length\n\n  if (currentArgsNum >= maxArgsNum) {\n    return fn.apply(null, args.slice(0, maxArgsNum))\n  } else {\n    return function acceptArgsWrapper() {\n      return continuePassArgsOrFired(fn, [...args, ...arguments], maxArgsNum)\n    }\n  }\n}\n\nconst curry = fn => {\n  invariant(typeof fn === 'function', ERROR_PARAM_INVALID_FN)\n\n  const fnLen = fn.length\n\n  const curryWrapper = function curryWrapper(arg0) {\n    return continuePassArgsOrFired(fn, [...arguments], fnLen)\n  }\n\n  // Store origin function\n  curryWrapper.fn = fn\n\n  return curryWrapper\n}\n\nexport default curry\n"]}